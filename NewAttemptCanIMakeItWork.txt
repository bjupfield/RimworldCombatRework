so far, I can at least adjust the endpoint damage in FinalizeAndAddInjury,
look at the hediff_injury at what we are doing with printMyShit function
I can clearly access the weapon type, which allows me to adjust the damage at the end at least

next Ill check if I can do a similar thing in the armor calculations and shield calculations

okay armor calculations does not recieve this easy input, but luckily this we can do some fancy stuff
with a static class handler

basically if we use the float and inequality thing we only have 128 weapon variants which we can use,
due to the amount being equal to log(base2)3*10^38
which is 127 + the 0 which is 128

okay the three things we need to adjust are the
compshield func
applyarmor
and finalize add injuyr

apply armor is the only one that doesnt recieve the weapon type, but the function
immediatly above does... the solution is not entirely apparent...
we could make a whole system for storing and finding the damage types... but we need to
fundamentally alter the armor logic anyway so... I think its probably best to just replace
that function entirely... and we can than just throw the damageinfo to it to recieve what
type of weapon and such, or just whatever info we actually need

okay so the damageinfo has the armorpenetration inside it, and as we don't need to adjust this in
applyarmor iterations we can just accept this as the armor penetration
I really don't know why he doesnt give the function the damageinfo... every single other instance gets it

okay ive been trying to see if I could do a funny trick where I would just replace the defs in the 
def call so I wouldn't have to make two def files, both a replacement def for the weapon and
the extra weapon info (armordamage shielddamage), but it looks like I cant.
this really isnt an issue, but It would of been nice if I could make it work. you probably can...
but i don't know how

okay, so I was thinking of making a manager class that would handle interpreting a new def that would contain the new shield damage, updated damage, armor damage and armor penetration...
however It doesnt seem like you can adjust the class values held by rimworld after load so adjusting the base damage without doing a patch operation is impossible
because of this we are not going to use a manager class either, but just a single patch to every weapon and bullet I guess...
now this might seem impossible how are we going to add the armor damage and shield damage to weapons if there are no shield and armor damage definitions...
well simple we will cheat and use the verb properties list...
thankfully there is a property in the thingdef class called verbproperites and it is a list of verbproperties...
furthermore its a list for no reason... there doesn't appear to be more than one for any object... and also the things defined by verb properties seem to be something an object will only need one of
some object might use more than one verb property but (and I just tested it) no weapon has more than one verbproperties

because of this we will be cheating by just defining our shield and armordamage with a second verbproperty, that uses two integers values defined in verb property
the two int values that we will use to define shielddamage and armordamage are
spraywidth - shielddamage
burstShotCount - armordamage

we can access both of these values through damageInfo, in our case by doing damageinfo.weapon.verbs[1].affectedCellCount/burstShotCount
the only issue I can see is if any other mod uses this trick... which I imagine they won't, but If they do I could define a staticClass that defines which position my verbs are at and
when we search for our verbs we use the index provided by this class...

okay ive done the armor thing, and updated the function to accept armor damage... but I think I want to eventually make it where the hitpoints percentage determines the effectivenesss of the armor,
so when the hitpoint percentage is 1% its only 1% effective... this would make it where the ammor rating would be 1% of what it is and it would take 1% of the armordamage, or something like this,
probabl we would have mininum values and stuff so the armor would still take damage to its eventual destruction...
another thing to add in consideration of the more armor damage would be armor repair, because you know don't want to destroy armor after every

okay I said I would need to adjust the damage dealt at the end of the calculation... but I really don't know what I meant by this... like why would I do this

okay we found out how to add a new verproperty to our weapon and everything and weve made it add the damage too, however we have run into another problem...
doing this messes something up with the default owner of a verbproperty, I dont really know what... its doing...


okay, we have implemented all of the logic for damage that I think I will... I might adjust the multipliers for some values but the basic logic is all there
however our armor damage thing does introducde another problem... the armor now needs to be repaired, otherwise it would completely ruin the balance of the game
I was thinking over how to do this, because the material used to repair the armor would need to be a dynamic recipe, not a static one like all recipes.
it would need to be dynamic because the materials required to repair the armor would need to base themselves of the amount of damage the armor has maintained
ex: armor is at 10% therefor the armor repair needs 9 plastell but if it was at 90% it would only need 1
(armor needs to will be damaged quite bad frequently so armor repair would not cost the whole set, proportionally)
im thinking that to handle these dynamic values we will use whatever the fuel system is in rimworld.
instead of fueling our workstation with wood we will fuel it with the raw materials that it uses to repair the armor (plasteel, steel, gold, uranium, etc.)
i don't know If I could use the fuel logic for this but its the only thing I can think of in the game that acts in that way, every single other recipe or crafting thing requires a static
amount of materials.
also for repair there would be a percentage chance that with every repair the armor piece loses quality, so you can't just have a legendary piece of armor forever, both for balance reasons, and
that a patchwork god-like helmet doesn't really make sense.

okay seems like we could use the fueling capabilities... using the comp_fuel or whatever we can create a new comp which is just a list of this that we apply to whatever stations that we
want to be fueled and we activate whatever comps we want when we need them to be fueled or whatever...

okay with the dynamic recipe comp we (we arent doing the fuel comp) we need another comp which links storage to a specific worktable, we were thinking of how to do this for a while, like how
in the world would I get the thing to save the thing (literally the thing, thats the name for objects in Rimworld). I was thinking to use the thingId and it would some how search through the
things with that or something... but instead of doing something weird like this we should just save the literaly thing to the comp...

inspectPaneFiller.dopanecontentsfor
^ we are trying to find how to add a selector to the link storage thing... has something to do with the inspect pane, but I think I want to do the seperate widgets thing
okay I think what it is actually is the inspectGizmoGrid,
and the gizmos are the things that
okay gizmos are the thing that puts the widgets on the side of the main panel that include
things like deconstruct toggle power and such
thing comps have a CompGetGizmsExtra, that connects to thing with comps which is somehow
down the line accessed by the getgizmo function in gizmogrid that displays the gizmos
anyway comppowertrader has a good basic override that displays how it works, it creates
a commandaction which is a derived class of action which is a derived class of gizmo
however as you can see there is an icon, which is the icon that is displayed.
cool we found what we need to implement a gizmo
okay the actual function that does the pane gizmo thing is InspectGizmoGrid.DrawInspectGizmoGridFor
okay ^ the above function mentioned is actually not what I need, as it triggers upon inspectection of an object, which we sor of need I guess actually but, its got to be programmed ina  different way or something

okay so the things that the gizmos are are commands, when you select a thing in game the thing itself has a overwrite function for the getgizmos that will call
the base gizmo function and whatever other parts of the object that has a gizmo
it seems that comp.getgizmosextra() is how a thingwithcomps gets its comps gizmos...
